#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LMSModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LMSDB")]
	public partial class LMSDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertBibliography(Bibliography instance);
    partial void UpdateBibliography(Bibliography instance);
    partial void DeleteBibliography(Bibliography instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBook_related_Author(Book_related_Author instance);
    partial void UpdateBook_related_Author(Book_related_Author instance);
    partial void DeleteBook_related_Author(Book_related_Author instance);
    partial void InsertInstance(Instance instance);
    partial void UpdateInstance(Instance instance);
    partial void DeleteInstance(Instance instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertPublishingHouse(PublishingHouse instance);
    partial void UpdatePublishingHouse(PublishingHouse instance);
    partial void DeletePublishingHouse(PublishingHouse instance);
    partial void InsertReader(Reader instance);
    partial void UpdateReader(Reader instance);
    partial void DeleteReader(Reader instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    #endregion
		
		public LMSDBDataContext() : 
				base(global::LMSModel.Properties.Settings.Default.LMSDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LMSDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LMSDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LMSDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LMSDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<Bibliography> Bibliographies
		{
			get
			{
				return this.GetTable<Bibliography>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<Book_related_Author> Book_related_Authors
		{
			get
			{
				return this.GetTable<Book_related_Author>();
			}
		}
		
		public System.Data.Linq.Table<Instance> Instances
		{
			get
			{
				return this.GetTable<Instance>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<PublishingHouse> PublishingHouses
		{
			get
			{
				return this.GetTable<PublishingHouse>();
			}
		}
		
		public System.Data.Linq.Table<Reader> Readers
		{
			get
			{
				return this.GetTable<Reader>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_account;
		
		private int _id_personal_info;
		
		private string _login;
		
		private string _password;
		
		private int _id_position;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Position> _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_accountChanging(int value);
    partial void Onid_accountChanged();
    partial void Onid_personal_infoChanging(int value);
    partial void Onid_personal_infoChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onid_positionChanging(int value);
    partial void Onid_positionChanged();
    #endregion
		
		public Account()
		{
			this._Person = default(EntityRef<Person>);
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_account", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_account
		{
			get
			{
				return this._id_account;
			}
			set
			{
				if ((this._id_account != value))
				{
					this.Onid_accountChanging(value);
					this.SendPropertyChanging();
					this._id_account = value;
					this.SendPropertyChanged("id_account");
					this.Onid_accountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_personal_info", DbType="Int NOT NULL")]
		public int id_personal_info
		{
			get
			{
				return this._id_personal_info;
			}
			set
			{
				if ((this._id_personal_info != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_personal_infoChanging(value);
					this.SendPropertyChanging();
					this._id_personal_info = value;
					this.SendPropertyChanged("id_personal_info");
					this.Onid_personal_infoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_position", DbType="Int NOT NULL")]
		public int id_position
		{
			get
			{
				return this._id_position;
			}
			set
			{
				if ((this._id_position != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_positionChanging(value);
					this.SendPropertyChanging();
					this._id_position = value;
					this.SendPropertyChanged("id_position");
					this.Onid_positionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Account", Storage="_Person", ThisKey="id_personal_info", OtherKey="id_person", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._id_personal_info = value.id_person;
					}
					else
					{
						this._id_personal_info = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Account", Storage="_Position", ThisKey="id_position", OtherKey="id_position", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._id_position = value.id_position;
					}
					else
					{
						this._id_position = default(int);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_author;
		
		private string _Name;
		
		private EntitySet<Book_related_Author> _Book_related_Authors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_authorChanging(int value);
    partial void Onid_authorChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Author()
		{
			this._Book_related_Authors = new EntitySet<Book_related_Author>(new Action<Book_related_Author>(this.attach_Book_related_Authors), new Action<Book_related_Author>(this.detach_Book_related_Authors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_author", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_author
		{
			get
			{
				return this._id_author;
			}
			set
			{
				if ((this._id_author != value))
				{
					this.Onid_authorChanging(value);
					this.SendPropertyChanging();
					this._id_author = value;
					this.SendPropertyChanged("id_author");
					this.Onid_authorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Book_related_Author", Storage="_Book_related_Authors", ThisKey="id_author", OtherKey="id_author")]
		public EntitySet<Book_related_Author> Book_related_Authors
		{
			get
			{
				return this._Book_related_Authors;
			}
			set
			{
				this._Book_related_Authors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book_related_Authors(Book_related_Author entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Book_related_Authors(Book_related_Author entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bibliography")]
	public partial class Bibliography : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_bibliography_record;
		
		private int _id_reader_ticket;
		
		private int _id_book_instance;
		
		private System.DateTime _give_date;
		
		private System.Nullable<System.DateTime> _get_date;
		
		private EntityRef<Instance> _Instance;
		
		private EntityRef<Reader> _Reader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_bibliography_recordChanging(int value);
    partial void Onid_bibliography_recordChanged();
    partial void Onid_reader_ticketChanging(int value);
    partial void Onid_reader_ticketChanged();
    partial void Onid_book_instanceChanging(int value);
    partial void Onid_book_instanceChanged();
    partial void Ongive_dateChanging(System.DateTime value);
    partial void Ongive_dateChanged();
    partial void Onget_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onget_dateChanged();
    #endregion
		
		public Bibliography()
		{
			this._Instance = default(EntityRef<Instance>);
			this._Reader = default(EntityRef<Reader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_bibliography_record", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_bibliography_record
		{
			get
			{
				return this._id_bibliography_record;
			}
			set
			{
				if ((this._id_bibliography_record != value))
				{
					this.Onid_bibliography_recordChanging(value);
					this.SendPropertyChanging();
					this._id_bibliography_record = value;
					this.SendPropertyChanged("id_bibliography_record");
					this.Onid_bibliography_recordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_reader_ticket", DbType="Int NOT NULL")]
		public int id_reader_ticket
		{
			get
			{
				return this._id_reader_ticket;
			}
			set
			{
				if ((this._id_reader_ticket != value))
				{
					if (this._Reader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_reader_ticketChanging(value);
					this.SendPropertyChanging();
					this._id_reader_ticket = value;
					this.SendPropertyChanged("id_reader_ticket");
					this.Onid_reader_ticketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_book_instance", DbType="Int NOT NULL")]
		public int id_book_instance
		{
			get
			{
				return this._id_book_instance;
			}
			set
			{
				if ((this._id_book_instance != value))
				{
					if (this._Instance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_book_instanceChanging(value);
					this.SendPropertyChanging();
					this._id_book_instance = value;
					this.SendPropertyChanged("id_book_instance");
					this.Onid_book_instanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_give_date", DbType="DateTime NOT NULL")]
		public System.DateTime give_date
		{
			get
			{
				return this._give_date;
			}
			set
			{
				if ((this._give_date != value))
				{
					this.Ongive_dateChanging(value);
					this.SendPropertyChanging();
					this._give_date = value;
					this.SendPropertyChanged("give_date");
					this.Ongive_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_get_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> get_date
		{
			get
			{
				return this._get_date;
			}
			set
			{
				if ((this._get_date != value))
				{
					this.Onget_dateChanging(value);
					this.SendPropertyChanging();
					this._get_date = value;
					this.SendPropertyChanged("get_date");
					this.Onget_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instance_Bibliography", Storage="_Instance", ThisKey="id_book_instance", OtherKey="id_book_inventory_num", IsForeignKey=true)]
		public Instance Instance
		{
			get
			{
				return this._Instance.Entity;
			}
			set
			{
				Instance previousValue = this._Instance.Entity;
				if (((previousValue != value) 
							|| (this._Instance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instance.Entity = null;
						previousValue.Bibliographies.Remove(this);
					}
					this._Instance.Entity = value;
					if ((value != null))
					{
						value.Bibliographies.Add(this);
						this._id_book_instance = value.id_book_inventory_num;
					}
					else
					{
						this._id_book_instance = default(int);
					}
					this.SendPropertyChanged("Instance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_Bibliography", Storage="_Reader", ThisKey="id_reader_ticket", OtherKey="id_reader_ticket", IsForeignKey=true)]
		public Reader Reader
		{
			get
			{
				return this._Reader.Entity;
			}
			set
			{
				Reader previousValue = this._Reader.Entity;
				if (((previousValue != value) 
							|| (this._Reader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reader.Entity = null;
						previousValue.Bibliographies.Remove(this);
					}
					this._Reader.Entity = value;
					if ((value != null))
					{
						value.Bibliographies.Add(this);
						this._id_reader_ticket = value.id_reader_ticket;
					}
					else
					{
						this._id_reader_ticket = default(int);
					}
					this.SendPropertyChanged("Reader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_book_isbn;
		
		private string _title;
		
		private string _full_title;
		
		private bool _is_eBook;
		
		private int _id_publishing;
		
		private string _language;
		
		private System.DateTime _date_publish;
		
		private string _book_series;
		
		private string _annotation;
		
		private int _id_subject;
		
		private EntitySet<Book_related_Author> _Book_related_Authors;
		
		private EntitySet<Instance> _Instances;
		
		private EntityRef<PublishingHouse> _PublishingHouse;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_book_isbnChanging(int value);
    partial void Onid_book_isbnChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Onfull_titleChanging(string value);
    partial void Onfull_titleChanged();
    partial void Onis_eBookChanging(bool value);
    partial void Onis_eBookChanged();
    partial void Onid_publishingChanging(int value);
    partial void Onid_publishingChanged();
    partial void OnlanguageChanging(string value);
    partial void OnlanguageChanged();
    partial void Ondate_publishChanging(System.DateTime value);
    partial void Ondate_publishChanged();
    partial void Onbook_seriesChanging(string value);
    partial void Onbook_seriesChanged();
    partial void OnannotationChanging(string value);
    partial void OnannotationChanged();
    partial void Onid_subjectChanging(int value);
    partial void Onid_subjectChanged();
    #endregion
		
		public Book()
		{
			this._Book_related_Authors = new EntitySet<Book_related_Author>(new Action<Book_related_Author>(this.attach_Book_related_Authors), new Action<Book_related_Author>(this.detach_Book_related_Authors));
			this._Instances = new EntitySet<Instance>(new Action<Instance>(this.attach_Instances), new Action<Instance>(this.detach_Instances));
			this._PublishingHouse = default(EntityRef<PublishingHouse>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_book_isbn", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_book_isbn
		{
			get
			{
				return this._id_book_isbn;
			}
			set
			{
				if ((this._id_book_isbn != value))
				{
					this.Onid_book_isbnChanging(value);
					this.SendPropertyChanging();
					this._id_book_isbn = value;
					this.SendPropertyChanged("id_book_isbn");
					this.Onid_book_isbnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_full_title", DbType="NVarChar(150)")]
		public string full_title
		{
			get
			{
				return this._full_title;
			}
			set
			{
				if ((this._full_title != value))
				{
					this.Onfull_titleChanging(value);
					this.SendPropertyChanging();
					this._full_title = value;
					this.SendPropertyChanged("full_title");
					this.Onfull_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_eBook", DbType="Bit NOT NULL")]
		public bool is_eBook
		{
			get
			{
				return this._is_eBook;
			}
			set
			{
				if ((this._is_eBook != value))
				{
					this.Onis_eBookChanging(value);
					this.SendPropertyChanging();
					this._is_eBook = value;
					this.SendPropertyChanged("is_eBook");
					this.Onis_eBookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_publishing", DbType="Int NOT NULL")]
		public int id_publishing
		{
			get
			{
				return this._id_publishing;
			}
			set
			{
				if ((this._id_publishing != value))
				{
					if (this._PublishingHouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_publishingChanging(value);
					this.SendPropertyChanging();
					this._id_publishing = value;
					this.SendPropertyChanged("id_publishing");
					this.Onid_publishingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_language", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string language
		{
			get
			{
				return this._language;
			}
			set
			{
				if ((this._language != value))
				{
					this.OnlanguageChanging(value);
					this.SendPropertyChanging();
					this._language = value;
					this.SendPropertyChanged("language");
					this.OnlanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_publish", DbType="Date NOT NULL")]
		public System.DateTime date_publish
		{
			get
			{
				return this._date_publish;
			}
			set
			{
				if ((this._date_publish != value))
				{
					this.Ondate_publishChanging(value);
					this.SendPropertyChanging();
					this._date_publish = value;
					this.SendPropertyChanged("date_publish");
					this.Ondate_publishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_book_series", DbType="NVarChar(50)")]
		public string book_series
		{
			get
			{
				return this._book_series;
			}
			set
			{
				if ((this._book_series != value))
				{
					this.Onbook_seriesChanging(value);
					this.SendPropertyChanging();
					this._book_series = value;
					this.SendPropertyChanged("book_series");
					this.Onbook_seriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_annotation", DbType="NVarChar(256)")]
		public string annotation
		{
			get
			{
				return this._annotation;
			}
			set
			{
				if ((this._annotation != value))
				{
					this.OnannotationChanging(value);
					this.SendPropertyChanging();
					this._annotation = value;
					this.SendPropertyChanged("annotation");
					this.OnannotationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_subject", DbType="Int NOT NULL")]
		public int id_subject
		{
			get
			{
				return this._id_subject;
			}
			set
			{
				if ((this._id_subject != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_subjectChanging(value);
					this.SendPropertyChanging();
					this._id_subject = value;
					this.SendPropertyChanged("id_subject");
					this.Onid_subjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Book_related_Author", Storage="_Book_related_Authors", ThisKey="id_book_isbn", OtherKey="id_book")]
		public EntitySet<Book_related_Author> Book_related_Authors
		{
			get
			{
				return this._Book_related_Authors;
			}
			set
			{
				this._Book_related_Authors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Instance", Storage="_Instances", ThisKey="id_book_isbn", OtherKey="id_book_isbn")]
		public EntitySet<Instance> Instances
		{
			get
			{
				return this._Instances;
			}
			set
			{
				this._Instances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PublishingHouse_Book", Storage="_PublishingHouse", ThisKey="id_publishing", OtherKey="id_publishing", IsForeignKey=true)]
		public PublishingHouse PublishingHouse
		{
			get
			{
				return this._PublishingHouse.Entity;
			}
			set
			{
				PublishingHouse previousValue = this._PublishingHouse.Entity;
				if (((previousValue != value) 
							|| (this._PublishingHouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PublishingHouse.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._PublishingHouse.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._id_publishing = value.id_publishing;
					}
					else
					{
						this._id_publishing = default(int);
					}
					this.SendPropertyChanged("PublishingHouse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Book", Storage="_Subject", ThisKey="id_subject", OtherKey="id_subject", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._id_subject = value.id_subject;
					}
					else
					{
						this._id_subject = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Book_related_Authors(Book_related_Author entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Book_related_Authors(Book_related_Author entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_Instances(Instance entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Instances(Instance entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book_related_Author")]
	public partial class Book_related_Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_book;
		
		private int _id_author;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_bookChanging(int value);
    partial void Onid_bookChanged();
    partial void Onid_authorChanging(int value);
    partial void Onid_authorChanged();
    #endregion
		
		public Book_related_Author()
		{
			this._Author = default(EntityRef<Author>);
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_book", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_book
		{
			get
			{
				return this._id_book;
			}
			set
			{
				if ((this._id_book != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_bookChanging(value);
					this.SendPropertyChanging();
					this._id_book = value;
					this.SendPropertyChanged("id_book");
					this.Onid_bookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_author", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_author
		{
			get
			{
				return this._id_author;
			}
			set
			{
				if ((this._id_author != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_authorChanging(value);
					this.SendPropertyChanging();
					this._id_author = value;
					this.SendPropertyChanged("id_author");
					this.Onid_authorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Book_related_Author", Storage="_Author", ThisKey="id_author", OtherKey="id_author", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Book_related_Authors.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Book_related_Authors.Add(this);
						this._id_author = value.id_author;
					}
					else
					{
						this._id_author = default(int);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Book_related_Author", Storage="_Book", ThisKey="id_book", OtherKey="id_book_isbn", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Book_related_Authors.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Book_related_Authors.Add(this);
						this._id_book = value.id_book_isbn;
					}
					else
					{
						this._id_book = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Instance")]
	public partial class Instance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_book_inventory_num;
		
		private int _id_book_isbn;
		
		private EntitySet<Bibliography> _Bibliographies;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_book_inventory_numChanging(int value);
    partial void Onid_book_inventory_numChanged();
    partial void Onid_book_isbnChanging(int value);
    partial void Onid_book_isbnChanged();
    #endregion
		
		public Instance()
		{
			this._Bibliographies = new EntitySet<Bibliography>(new Action<Bibliography>(this.attach_Bibliographies), new Action<Bibliography>(this.detach_Bibliographies));
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_book_inventory_num", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_book_inventory_num
		{
			get
			{
				return this._id_book_inventory_num;
			}
			set
			{
				if ((this._id_book_inventory_num != value))
				{
					this.Onid_book_inventory_numChanging(value);
					this.SendPropertyChanging();
					this._id_book_inventory_num = value;
					this.SendPropertyChanged("id_book_inventory_num");
					this.Onid_book_inventory_numChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_book_isbn", DbType="Int NOT NULL")]
		public int id_book_isbn
		{
			get
			{
				return this._id_book_isbn;
			}
			set
			{
				if ((this._id_book_isbn != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_book_isbnChanging(value);
					this.SendPropertyChanging();
					this._id_book_isbn = value;
					this.SendPropertyChanged("id_book_isbn");
					this.Onid_book_isbnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instance_Bibliography", Storage="_Bibliographies", ThisKey="id_book_inventory_num", OtherKey="id_book_instance")]
		public EntitySet<Bibliography> Bibliographies
		{
			get
			{
				return this._Bibliographies;
			}
			set
			{
				this._Bibliographies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Instance", Storage="_Book", ThisKey="id_book_isbn", OtherKey="id_book_isbn", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Instances.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Instances.Add(this);
						this._id_book_isbn = value.id_book_isbn;
					}
					else
					{
						this._id_book_isbn = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bibliographies(Bibliography entity)
		{
			this.SendPropertyChanging();
			entity.Instance = this;
		}
		
		private void detach_Bibliographies(Bibliography entity)
		{
			this.SendPropertyChanging();
			entity.Instance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_person;
		
		private string _full_name;
		
		private System.DateTime _birthday;
		
		private string _address;
		
		private decimal _phone;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Reader> _Readers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_personChanging(int value);
    partial void Onid_personChanged();
    partial void Onfull_nameChanging(string value);
    partial void Onfull_nameChanged();
    partial void OnbirthdayChanging(System.DateTime value);
    partial void OnbirthdayChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(decimal value);
    partial void OnphoneChanged();
    #endregion
		
		public Person()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Readers = new EntitySet<Reader>(new Action<Reader>(this.attach_Readers), new Action<Reader>(this.detach_Readers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_person", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_person
		{
			get
			{
				return this._id_person;
			}
			set
			{
				if ((this._id_person != value))
				{
					this.Onid_personChanging(value);
					this.SendPropertyChanging();
					this._id_person = value;
					this.SendPropertyChanged("id_person");
					this.Onid_personChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_full_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string full_name
		{
			get
			{
				return this._full_name;
			}
			set
			{
				if ((this._full_name != value))
				{
					this.Onfull_nameChanging(value);
					this.SendPropertyChanging();
					this._full_name = value;
					this.SendPropertyChanged("full_name");
					this.Onfull_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthday", DbType="Date NOT NULL")]
		public System.DateTime birthday
		{
			get
			{
				return this._birthday;
			}
			set
			{
				if ((this._birthday != value))
				{
					this.OnbirthdayChanging(value);
					this.SendPropertyChanging();
					this._birthday = value;
					this.SendPropertyChanged("birthday");
					this.OnbirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(150)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Decimal(10,0) NOT NULL")]
		public decimal phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Account", Storage="_Accounts", ThisKey="id_person", OtherKey="id_personal_info")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Reader", Storage="_Readers", ThisKey="id_person", OtherKey="id_personal_info")]
		public EntitySet<Reader> Readers
		{
			get
			{
				return this._Readers;
			}
			set
			{
				this._Readers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_position;
		
		private PositionEnum _position_enum;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_positionChanging(int value);
    partial void Onid_positionChanged();
    partial void Onposition_enumChanging(PositionEnum value);
    partial void Onposition_enumChanged();
    #endregion
		
		public Position()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_position", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_position
		{
			get
			{
				return this._id_position;
			}
			set
			{
				if ((this._id_position != value))
				{
					this.Onid_positionChanging(value);
					this.SendPropertyChanging();
					this._id_position = value;
					this.SendPropertyChanged("id_position");
					this.Onid_positionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position_enum", DbType="Int NOT NULL", CanBeNull=false)]
		public PositionEnum position_enum
		{
			get
			{
				return this._position_enum;
			}
			set
			{
				if ((this._position_enum != value))
				{
					this.Onposition_enumChanging(value);
					this.SendPropertyChanging();
					this._position_enum = value;
					this.SendPropertyChanged("position_enum");
					this.Onposition_enumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Account", Storage="_Accounts", ThisKey="id_position", OtherKey="id_position")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublishingHouse")]
	public partial class PublishingHouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_publishing;
		
		private string _name;
		
		private string _location;
		
		private string _category;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_publishingChanging(int value);
    partial void Onid_publishingChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    partial void OncategoryChanging(string value);
    partial void OncategoryChanged();
    #endregion
		
		public PublishingHouse()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_publishing", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_publishing
		{
			get
			{
				return this._id_publishing;
			}
			set
			{
				if ((this._id_publishing != value))
				{
					this.Onid_publishingChanging(value);
					this.SendPropertyChanging();
					this._id_publishing = value;
					this.SendPropertyChanged("id_publishing");
					this.Onid_publishingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="NVarChar(50)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category", DbType="NVarChar(30)")]
		public string category
		{
			get
			{
				return this._category;
			}
			set
			{
				if ((this._category != value))
				{
					this.OncategoryChanging(value);
					this.SendPropertyChanging();
					this._category = value;
					this.SendPropertyChanged("category");
					this.OncategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PublishingHouse_Book", Storage="_Books", ThisKey="id_publishing", OtherKey="id_publishing")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.PublishingHouse = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.PublishingHouse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reader")]
	public partial class Reader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_reader_ticket;
		
		private int _id_personal_info;
		
		private EntitySet<Bibliography> _Bibliographies;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_reader_ticketChanging(int value);
    partial void Onid_reader_ticketChanged();
    partial void Onid_personal_infoChanging(int value);
    partial void Onid_personal_infoChanged();
    #endregion
		
		public Reader()
		{
			this._Bibliographies = new EntitySet<Bibliography>(new Action<Bibliography>(this.attach_Bibliographies), new Action<Bibliography>(this.detach_Bibliographies));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_reader_ticket", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_reader_ticket
		{
			get
			{
				return this._id_reader_ticket;
			}
			set
			{
				if ((this._id_reader_ticket != value))
				{
					this.Onid_reader_ticketChanging(value);
					this.SendPropertyChanging();
					this._id_reader_ticket = value;
					this.SendPropertyChanged("id_reader_ticket");
					this.Onid_reader_ticketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_personal_info", DbType="Int NOT NULL")]
		public int id_personal_info
		{
			get
			{
				return this._id_personal_info;
			}
			set
			{
				if ((this._id_personal_info != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_personal_infoChanging(value);
					this.SendPropertyChanging();
					this._id_personal_info = value;
					this.SendPropertyChanged("id_personal_info");
					this.Onid_personal_infoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_Bibliography", Storage="_Bibliographies", ThisKey="id_reader_ticket", OtherKey="id_reader_ticket")]
		public EntitySet<Bibliography> Bibliographies
		{
			get
			{
				return this._Bibliographies;
			}
			set
			{
				this._Bibliographies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Reader", Storage="_Person", ThisKey="id_personal_info", OtherKey="id_person", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Readers.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Readers.Add(this);
						this._id_personal_info = value.id_person;
					}
					else
					{
						this._id_personal_info = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bibliographies(Bibliography entity)
		{
			this.SendPropertyChanging();
			entity.Reader = this;
		}
		
		private void detach_Bibliographies(Bibliography entity)
		{
			this.SendPropertyChanging();
			entity.Reader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_subject;
		
		private string _name;
		
		private System.Nullable<int> _id_parent_subject;
		
		private EntitySet<Book> _Books;
		
		private EntitySet<Subject> _Subjects;
		
		private EntityRef<Subject> _Subject1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_subjectChanging(int value);
    partial void Onid_subjectChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onid_parent_subjectChanging(System.Nullable<int> value);
    partial void Onid_parent_subjectChanged();
    #endregion
		
		public Subject()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			this._Subject1 = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_subject", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_subject
		{
			get
			{
				return this._id_subject;
			}
			set
			{
				if ((this._id_subject != value))
				{
					this.Onid_subjectChanging(value);
					this.SendPropertyChanging();
					this._id_subject = value;
					this.SendPropertyChanged("id_subject");
					this.Onid_subjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_parent_subject", DbType="Int")]
		public System.Nullable<int> id_parent_subject
		{
			get
			{
				return this._id_parent_subject;
			}
			set
			{
				if ((this._id_parent_subject != value))
				{
					if (this._Subject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_parent_subjectChanging(value);
					this.SendPropertyChanging();
					this._id_parent_subject = value;
					this.SendPropertyChanged("id_parent_subject");
					this.Onid_parent_subjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Book", Storage="_Books", ThisKey="id_subject", OtherKey="id_subject")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Subject", Storage="_Subjects", ThisKey="id_subject", OtherKey="id_parent_subject")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Subject", Storage="_Subject1", ThisKey="id_parent_subject", OtherKey="id_subject", IsForeignKey=true)]
		public Subject Subject1
		{
			get
			{
				return this._Subject1.Entity;
			}
			set
			{
				Subject previousValue = this._Subject1.Entity;
				if (((previousValue != value) 
							|| (this._Subject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject1.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._Subject1.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._id_parent_subject = value.id_subject;
					}
					else
					{
						this._id_parent_subject = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Subject1 = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Subject1 = null;
		}
	}
}
#pragma warning restore 1591
